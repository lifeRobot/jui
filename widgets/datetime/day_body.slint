import { NumberRound } from "./common_body.slint";

component Header inherits Rectangle {
    in property <[string]> months:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    height: 25px;
    background: #80808050;
    HorizontalLayout {
        for month in months: Rectangle {
            width: root.width / 7;
            Text {
                text: month;
            }
        }
    }
}

export component DayBody inherits Rectangle {
    in property <int> start_week:0;
    in property <int> max_day:31;
    in property <string> day:1;
    in property <[string]> months <=> header.months;
    private property <int> end_week:max_day - get_day(get_cent_line(),6);
    private property <int> last_line:get_cent_line() + 1;
    callback clicked(int);
    header := Header {
        y: 0;
    }

    // calc the first line
    HorizontalLayout {
        height: header.height;
        y: header.height + 5px;
        Rectangle {
            width: root.width / 7 * start_week;
        }

        for i in (7 - start_week): Rectangle {
            NumberRound {
                active: day == self.text;
                num: get_day(0,i + start_week);
                clicked => {
                    clicked(self.num);
                }
            }
        }
    }

    // calc the centent line
    for i in get_cent_line(): HorizontalLayout {
        height: 25px;
        y: (i + 2) * 30px;
        for j in 7: Rectangle {
            NumberRound {
                active: day == self.text;
                num: get_day(i + 1,j);
                clicked => {
                    clicked(self.num);
                }
            }
        }
    }

    // calc the last line
    HorizontalLayout {
        height: 25px;
        y: (get_cent_line() + 2) * 30px;
        for i in end_week: Rectangle {
            NumberRound {
                active: day == self.text;
                num: get_day(last_line,i);
                clicked => {
                    clicked(self.num);
                }
            }
        }
        Rectangle {
            width: (root.width / 7) * (7 - end_week);
        }
    }

    // get day
    function get_day(line: int, row: int) -> int {
        line * 7 + row + 1 - start_week
    }
    // get centent line
    function get_cent_line() -> int {
        (max_day - get_day(0,6)) / 7
    }
}
